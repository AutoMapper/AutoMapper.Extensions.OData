// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MigrationTool;

namespace MigrationTool.Migrations
{
    [DbContext(typeof(MigrationContext))]
    [Migration("20221226161339_Aggregation")]
    partial class Aggregation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblCategory", b =>
                {
                    b.Property<string>("FldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FldId");

                    b.ToTable("TblCategory");
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblCurrency", b =>
                {
                    b.Property<string>("FldCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FldCode");

                    b.ToTable("TblCurrency");
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblCustomer", b =>
                {
                    b.Property<string>("FldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FldId");

                    b.ToTable("TblCustomer");
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblProduct", b =>
                {
                    b.Property<string>("FldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FldTaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FldId");

                    b.HasIndex("FldCategoryId");

                    b.ToTable("TblProduct");
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblSales", b =>
                {
                    b.Property<int>("FldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("FldAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FldCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldCustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldSalesOrganizationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldTimeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FldId");

                    b.HasIndex("FldCurrencyCode");

                    b.HasIndex("FldCustomerId");

                    b.HasIndex("FldProductId");

                    b.HasIndex("FldSalesOrganizationId");

                    b.HasIndex("FldTimeId");

                    b.ToTable("TblSales");
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblSalesOrganization", b =>
                {
                    b.Property<string>("FldId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FldSuperordinateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FldId");

                    b.HasIndex("FldSuperordinateId");

                    b.ToTable("TblSalesOrganization");
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblTime", b =>
                {
                    b.Property<string>("FldDate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FldMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FldQuarter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FldYear")
                        .HasColumnType("int");

                    b.HasKey("FldDate");

                    b.ToTable("TblTime");
                });

            modelBuilder.Entity("DAL.EFCore.TBuilder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TBuilders");
                });

            modelBuilder.Entity("DAL.EFCore.TBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pkBID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuilderId")
                        .HasColumnType("int");

                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Identifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LongName")
                        .HasColumnName("sLongName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MandatorId")
                        .HasColumnName("fkMandatorID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuilderId");

                    b.HasIndex("MandatorId");

                    b.ToTable("OB_TBuilding");
                });

            modelBuilder.Entity("DAL.EFCore.TCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TCities");
                });

            modelBuilder.Entity("DAL.EFCore.TMandator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pkMandatorID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Identity")
                        .HasColumnName("gIdentity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("sName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("G_TMandator");
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblProduct", b =>
                {
                    b.HasOne("DAL.EFCore.Aggregation.TblCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("FldCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblSales", b =>
                {
                    b.HasOne("DAL.EFCore.Aggregation.TblCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("FldCurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.EFCore.Aggregation.TblCustomer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("FldCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.EFCore.Aggregation.TblProduct", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("FldProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.EFCore.Aggregation.TblSalesOrganization", "SalesOrganization")
                        .WithMany()
                        .HasForeignKey("FldSalesOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.EFCore.Aggregation.TblTime", "Time")
                        .WithMany()
                        .HasForeignKey("FldTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.EFCore.Aggregation.TblSalesOrganization", b =>
                {
                    b.HasOne("DAL.EFCore.Aggregation.TblSalesOrganization", "Superordinate")
                        .WithMany()
                        .HasForeignKey("FldSuperordinateId");
                });

            modelBuilder.Entity("DAL.EFCore.TBuilder", b =>
                {
                    b.HasOne("DAL.EFCore.TCity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.EFCore.TBuilding", b =>
                {
                    b.HasOne("DAL.EFCore.TBuilder", "Builder")
                        .WithMany()
                        .HasForeignKey("BuilderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.EFCore.TMandator", "Mandator")
                        .WithMany("Buildings")
                        .HasForeignKey("MandatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
